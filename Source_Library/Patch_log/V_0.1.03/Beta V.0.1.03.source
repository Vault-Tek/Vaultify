<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vaultify - Password Manager</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .card {
            transform-style: preserve-3d;
            transition: transform 0.1s ease-out;
        }

        .password-container {
            max-height: 300px;
            overflow-y: scroll;
            scrollbar-width: none; /* For Firefox */
        }

        .password-container::-webkit-scrollbar {
            display: none; /* For Chrome, Safari, and Edge */
        }

        .search-container {
            display: none; /* Hidden by default */
            margin-top: 10px;
        }

        .password-container li {
            background-color: #1a202c; /* Original color */
            padding: 12px;
            border-radius: 8px; /* Rounded corners */
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow */
        }

        /* Button Styles */
        .btn {
            background-color: #2d3748; /* This is the grey color you want */
            color: #edf2f7;
            padding: 4px 10px;  /* Smaller padding */
            border-radius: 4px;
            font-size: 0.75rem; /* Smaller font size */
            margin: 0 4px;
            border: none;
            cursor: pointer;
        }

        .btn-view {
            background-color: #2d3748; /* Match the color of the password boxes */
        }

        .btn-edit {
            background-color: #2d3748; /* Match the color of the password boxes */
        }

        .btn-delete {
            background-color: #2d3748; /* Match the color of the password boxes */
        }

        /* Action Buttons Layout */
        .action-btns {
            display: flex;
            justify-content: flex-start;
            align-items: center;
        }

        /* Make action buttons inline */
        .action-btns button {
            margin-right: 5px; /* Adjust spacing between buttons */
        }
    </style>
</head>
<body class="bg-gray-900 text-white flex justify-center items-center h-screen" onmousemove="handleMouseMove(event)">
    <div class="w-96 p-6 bg-gray-800 rounded-lg shadow-lg card">
        <h2 class="text-xl font-bold mb-4 text-center">Vaultify üîí</h2>
        <input id="site" type="text" placeholder="Website" class="w-full p-2 mb-2 rounded bg-gray-700 text-white">
        <input id="username" type="text" placeholder="Username" class="w-full p-2 mb-2 rounded bg-gray-700 text-white">
        <input id="password" type="password" placeholder="Password" class="w-full p-2 mb-2 rounded bg-gray-700 text-white" oninput="toggleViewButton()">
        <button onclick="savePassword()" class="w-full bg-blue-500 p-2 rounded">Save</button>
        
        <button onclick="togglePasswordList()" class="w-full bg-gray-700 p-2 rounded mt-4">Saved Passwords ‚ñº</button>
        
        <div id="passwordContainer" class="password-container bg-gray-700 rounded mt-2 p-2" style="display: none;">
            <div id="searchContainer" class="search-container">
                <input 
                    id="searchInput" 
                    type="text" 
                    placeholder="Search for website or username"
                    class="w-full p-2 mb-2 rounded bg-gray-600 text-white"
                    oninput="searchPasswords()"
                >
            </div>
            <ul id="passwordList" class="mt-2"></ul>
        </div>
    </div>

    <script>
        let editingIndex = -1;

        function savePassword() {
            const site = document.getElementById('site').value;
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            if (!site || !username || !password) return;
            
            const entry = { site, username, password: btoa(password) };
            let passwords = JSON.parse(localStorage.getItem('passwords')) || [];
            
            if (editingIndex === -1) {
                passwords.push(entry); // New password
            } else {
                passwords[editingIndex] = entry; // Edited password
                editingIndex = -1; // Reset after saving
            }
            
            localStorage.setItem('passwords', JSON.stringify(passwords));
            displayPasswords();

            // Clear the input fields after saving
            document.getElementById('site').value = '';
            document.getElementById('username').value = '';
            document.getElementById('password').value = '';
        }

        function displayPasswords() {
            const passwordList = document.getElementById('passwordList');
            passwordList.innerHTML = '';
            const passwords = JSON.parse(localStorage.getItem('passwords')) || [];
            passwords.forEach((entry, index) => {
                passwordList.innerHTML +=  
                    `<li class='bg-gray-800 p-2 rounded mt-2 flex justify-between items-center'>
                        <div>
                            <strong>${entry.site}</strong> - ${entry.username} - 
                            <span id='password-${index}'>${'*'.repeat(atob(entry.password).length)}</span>
                        </div>
                        <div class='action-btns'>
                            <button onclick='revealPassword(${index})' class='btn btn-view' id='viewBtn-${index}'>View</button>
                            <button onclick='editPassword(${index})' class='btn btn-edit hidden' id='editBtn-${index}'>‚úèÔ∏è</button>
                            <button onclick='deletePassword(${index})' class='btn btn-delete' id='deleteBtn-${index}'>üóë</button>
                        </div>
                    </li>`;
            });
        }

        function revealPassword(index) {
            let passwords = JSON.parse(localStorage.getItem('passwords')) || [];
            const passwordField = document.getElementById(`password-${index}`);
            const viewBtn = document.getElementById(`viewBtn-${index}`);
            const deleteBtn = document.getElementById(`deleteBtn-${index}`);
            const editBtn = document.getElementById(`editBtn-${index}`);
            
            if (passwordField.innerText.includes('*')) {
                // Reveal password
                passwordField.innerText = atob(passwords[index].password);
                viewBtn.innerText = 'Hide'; // Change button to 'Hide'
                
                // Show Edit button, hide Delete button
                editBtn.classList.remove('hidden');
                deleteBtn.classList.add('hidden');
            } else {
                // Hide password
                passwordField.innerText = '*'.repeat(atob(passwords[index].password).length);
                viewBtn.innerText = 'View'; // Change button to 'View'
                
                // Hide Edit button, show Delete button
                editBtn.classList.add('hidden');
                deleteBtn.classList.remove('hidden');
            }
        }

        function deletePassword(index) {
            let passwords = JSON.parse(localStorage.getItem('passwords')) || [];
            passwords.splice(index, 1); // Remove the password entry at the index

            // Update localStorage
            localStorage.setItem('passwords', JSON.stringify(passwords)); 

            displayPasswords(); // Refresh the displayed list
        }

        function editPassword(index) {
            let passwords = JSON.parse(localStorage.getItem('passwords')) || [];
            const passwordData = passwords[index];

            // Populate the input fields with the current values
            document.getElementById('site').value = passwordData.site;
            document.getElementById('username').value = passwordData.username;
            document.getElementById('password').value = atob(passwordData.password);

            // Set the editingIndex so we know it's an update
            editingIndex = index;

            // Show the password field as a password input during editing
            document.getElementById('password').type = 'password';
            toggleViewButton();
        }

        function toggleViewButton() {
            const passwordField = document.getElementById('password');
            const viewBtn = document.getElementById('viewBtn-edit');
            
            if (passwordField.value.length > 0) {
                // Show View button if there's a password entered
                viewBtn.style.display = 'inline-block';
            } else {
                // Hide View button if password field is empty
                viewBtn.style.display = 'none';
            }
        }

        function togglePasswordList() {
            const container = document.getElementById('passwordContainer');
            const searchContainer = document.getElementById('searchContainer');
            container.style.display = container.style.display === 'none' ? 'block' : 'none';
            searchContainer.style.display = container.style.display === 'block' ? 'block' : 'none'; // Show the search box
        }

        function handleMouseMove(event) {
            const card = document.querySelector('.card');
            const { clientX: x, clientY: y } = event;
            const { innerWidth: width, innerHeight: height } = window;
            
            const moveX = ((x - width / 2) / width) * 20;
            const moveY = ((y - height / 2) / height) * 20;

            card.style.transform = `rotateX(${moveY}deg) rotateY(${moveX}deg)`;
        }

        // Trigger save on Enter key press
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                savePassword();
            }
        });

        // Display saved passwords on load
        displayPasswords();
    </script>
</body>
</html>
